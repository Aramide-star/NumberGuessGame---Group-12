<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.studentapp</groupId>
  <artifactId>NumberGuessingGame</artifactId>
  <version>1.0.0</version>
  <packaging>war</packaging>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- surefire 3.x has good JUnit 5/Vintage support -->
    <maven.surefire.plugin.version>3.2.5</maven.surefire.plugin.version>
    <maven.war.plugin.version>3.4.0</maven.war.plugin.version>
    <sonar.maven.plugin.version>3.10.0.2594</sonar.maven.plugin.version>
    <junit.jupiter.version>5.10.2</junit.jupiter.version>
    <junit.vintage.version>5.10.2</junit.vintage.version>
    <junit4.version>4.13.2</junit4.version>
    <mockito.version>5.12.0</mockito.version>
  </properties>

  <dependencies>
    <!-- Runtime API for Tomcat 10+ (Jakarta). Provided by the container at runtime. -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>6.0.0</version>
      <scope>provided</scope>
    </dependency>

    <!-- ===== Test stack ===== -->

    <!-- JUnit 5 (Jupiter) -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JUnit Vintage engine to run legacy JUnit 4 tests on the JUnit 5 platform -->
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <version>${junit.vintage.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JUnit 4 (compile support for existing org.junit.* imports) -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit4.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Mockito (used by many servlet/unit tests) -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Legacy javax.servlet API only for compiling old tests that still import javax.* -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>4.0.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Unit test runner -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
        <configuration>
          <!-- Good default for JPMS projects; harmless otherwise -->
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>

      <!-- WAR packaging -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${maven.war.plugin.version}</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>

      <!-- SonarQube (optional to pin explicitly; Jenkins runs mvn sonar:sonar) -->
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>${sonar.maven.plugin.version}</version>
      </plugin>
    </plugins>
  </build>
</project>
